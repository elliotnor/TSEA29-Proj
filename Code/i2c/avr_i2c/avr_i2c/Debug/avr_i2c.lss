
avr_i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000003b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001023  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0a  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086f  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  000028ac  2**2
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 10 .debug_str    0000059d  00000000  00000000  00002a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000251  00000000  00000000  00003025  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003276  2**0
=======
 10 .debug_str    0000056c  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000329  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003481  2**0
>>>>>>> sensorIntegration
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	6f c0       	rjmp	.+222    	; 0x148 <__vector_26>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	c2 d0       	rcall	.+388    	; 0x22e <main>
  aa:	46 c1       	rjmp	.+652    	; 0x338 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <initI2C>:
	TWDR = 10;
}

void dataReceived()
{
	int data = TWDR;
  ae:	f8 94       	cli
  b0:	80 ea       	ldi	r24, 0xA0	; 160
  b2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	8c 7f       	andi	r24, 0xFC	; 252
  ba:	87 b9       	out	0x07, r24	; 7
  bc:	ec eb       	ldi	r30, 0xBC	; 188
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	10 82       	st	Z, r1
  c2:	80 81       	ld	r24, Z
  c4:	85 6c       	ori	r24, 0xC5	; 197
  c6:	80 83       	st	Z, r24
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <TWILoadData>:
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  d2:	08 95       	ret

000000d4 <enableTWIInterrupt>:
}

void enableTWIInterrupt()
{
	TWCR |= (1 << TWINT);
  d4:	ec eb       	ldi	r30, 0xBC	; 188
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <enable_pullups>:
}*/

//enables pull-up override on all ports
void enable_pullups(){

	DDRA = 0x00;
  e0:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x00;
  e2:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
  e4:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x00;
  e6:	1a b8       	out	0x0a, r1	; 10
	
	PINA = 0x00;
  e8:	10 b8       	out	0x00, r1	; 0
	PINB = 0x00;
  ea:	13 b8       	out	0x03, r1	; 3
	PINC = 0x00;
  ec:	16 b8       	out	0x06, r1	; 6
	PIND = 0x00;
  ee:	19 b8       	out	0x09, r1	; 9
	
	PORTA = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
  f4:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
  f6:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
  f8:	8b b9       	out	0x0b, r24	; 11
	
	MCUCR |= ~(1<<PUD);
  fa:	85 b7       	in	r24, 0x35	; 53
  fc:	8f 6e       	ori	r24, 0xEF	; 239
  fe:	85 bf       	out	0x35, r24	; 53
 100:	08 95       	ret

00000102 <databehandling>:




void databehandling() {
	uint8_t data = TWDR;
 102:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
<<<<<<< HEAD
	int speed = 75;
=======
	int speed = 90;
>>>>>>> sensorIntegration
	
	switch(data) {
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	91 f0       	breq	.+36     	; 0x12e <databehandling+0x2c>
 10a:	28 f4       	brcc	.+10     	; 0x116 <databehandling+0x14>
 10c:	88 23       	and	r24, r24
 10e:	41 f0       	breq	.+16     	; 0x120 <databehandling+0x1e>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	41 f0       	breq	.+16     	; 0x124 <databehandling+0x22>
 114:	08 95       	ret
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	79 f0       	breq	.+30     	; 0x138 <databehandling+0x36>
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	89 f0       	breq	.+34     	; 0x140 <databehandling+0x3e>
 11e:	08 95       	ret
		case 0x00:
			stop();
<<<<<<< HEAD
 120:	e1 c0       	rjmp	.+450    	; 0x2e4 <stop>
=======
 120:	05 c1       	rjmp	.+522    	; 0x32c <stop>
>>>>>>> sensorIntegration
			break;
 122:	08 95       	ret
		
		case 0x01:
			set_speed(speed);
<<<<<<< HEAD
 124:	8b e4       	ldi	r24, 0x4B	; 75
 126:	d1 d0       	rcall	.+418    	; 0x2ca <set_speed>
=======
 124:	8a e5       	ldi	r24, 0x5A	; 90
 126:	f5 d0       	rcall	.+490    	; 0x312 <set_speed>
>>>>>>> sensorIntegration
			set_direction(FORWARD);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	be c0       	rjmp	.+380    	; 0x2a8 <set_direction>
			//_delay_ms(500);
			break;
 12c:	08 95       	ret
		
		case 0x02:
			set_speed(speed);
 12e:	8b e4       	ldi	r24, 0x4B	; 75
 130:	cc d0       	rcall	.+408    	; 0x2ca <set_speed>
			set_direction(BACKWARD);
 132:	80 e0       	ldi	r24, 0x00	; 0
			//_delay_ms(500);
			break;
 134:	b9 c0       	rjmp	.+370    	; 0x2a8 <set_direction>
		
		case 0x03:
			set_speed(speed);
 136:	08 95       	ret
			rotate_right();
 138:	8b e4       	ldi	r24, 0x4B	; 75
 13a:	c7 d0       	rcall	.+398    	; 0x2ca <set_speed>
			//_delay_ms(500);
			break;
 13c:	c1 c0       	rjmp	.+386    	; 0x2c0 <rotate_right>
		
		case 0x04:
			set_speed(speed);
 13e:	08 95       	ret
 140:	8b e4       	ldi	r24, 0x4B	; 75
 142:	c3 d0       	rcall	.+390    	; 0x2ca <set_speed>
			rotate_left();
 144:	b8 c0       	rjmp	.+368    	; 0x2b6 <rotate_left>
 146:	08 95       	ret

00000148 <__vector_26>:
 148:	1f 92       	push	r1
			break;
	}
}

ISR(TWI_vect) //Interrupt TWI
{
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0b b6       	in	r0, 0x3b	; 59
 154:	0f 92       	push	r0
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	cli();
 16e:	f8 94       	cli
	
	if(TWSR == 0xA8 || TWSR == 0xB8){ // Master returned ACK, more data wanted. Load TWDR with data to transmit
 170:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 174:	88 3a       	cpi	r24, 0xA8	; 168
 176:	21 f0       	breq	.+8      	; 0x180 <__vector_26+0x38>
 178:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 17c:	88 3b       	cpi	r24, 0xB8	; 184
 17e:	81 f4       	brne	.+32     	; 0x1a0 <__vector_26+0x58>
		PORTA |= (1<<PORTA0);
 180:	10 9a       	sbi	0x02, 0	; 2
		DDRC |= (1 << DDC1);
 182:	39 9a       	sbi	0x07, 1	; 7
		TWILoadData(cntr);
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	a1 df       	rcall	.-190    	; 0xcc <TWILoadData>
		cntr = (cntr + 1) % 5;
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	65 e0       	ldi	r22, 0x05	; 5
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	a9 d0       	rcall	.+338    	; 0x2ea <__divmodhi4>
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTA &= ~(1<<PORTA0);
 19c:	10 98       	cbi	0x02, 0	; 2
 19e:	32 c0       	rjmp	.+100    	; 0x204 <__vector_26+0xbc>
	}
	else if(TWSR == 0xC0 || TWSR == 0xC8){ // Slave finished transmit, Master returned NACK(C0) or ACK(C8
 1a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1a4:	80 3c       	cpi	r24, 0xC0	; 192
 1a6:	21 f0       	breq	.+8      	; 0x1b0 <__vector_26+0x68>
 1a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1ac:	88 3c       	cpi	r24, 0xC8	; 200
 1ae:	29 f4       	brne	.+10     	; 0x1ba <__vector_26+0x72>
		PORTA |= (1<<PORTA1);
		DDRC |= (1 << DDC1);
 1b0:	11 9a       	sbi	0x02, 1	; 2
		enableTWIInterrupt(); // Transmit is finished, set TWINT flag to 0
 1b2:	39 9a       	sbi	0x07, 1	; 7
 1b4:	8f df       	rcall	.-226    	; 0xd4 <enableTWIInterrupt>
		PORTA &= ~(1<<PORTA1);
 1b6:	11 98       	cbi	0x02, 1	; 2
		DDRC |= (1 << DDC1);
		TWILoadData(cntr);
		cntr = (cntr + 1) % 5;
		PORTA &= ~(1<<PORTA0);
	}
	else if(TWSR == 0xC0 || TWSR == 0xC8){ // Slave finished transmit, Master returned NACK(C0) or ACK(C8
 1b8:	25 c0       	rjmp	.+74     	; 0x204 <__vector_26+0xbc>
		PORTA |= (1<<PORTA1);
		DDRC |= (1 << DDC1);
		enableTWIInterrupt(); // Transmit is finished, set TWINT flag to 0
		PORTA &= ~(1<<PORTA1);
	}
	else if(TWSR == 0x60 || TWSR == 0x68 || TWSR == 0x70 || TWSR == 0x78){
 1ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1be:	80 36       	cpi	r24, 0x60	; 96
 1c0:	61 f0       	breq	.+24     	; 0x1da <__vector_26+0x92>
 1c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1c6:	88 36       	cpi	r24, 0x68	; 104
 1c8:	41 f0       	breq	.+16     	; 0x1da <__vector_26+0x92>
 1ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1ce:	80 37       	cpi	r24, 0x70	; 112
 1d0:	21 f0       	breq	.+8      	; 0x1da <__vector_26+0x92>
 1d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1d6:	88 37       	cpi	r24, 0x78	; 120
 1d8:	21 f4       	brne	.+8      	; 0x1e2 <__vector_26+0x9a>
		//Do nothing, waiting for data
		PORTA |= (1<<PORTA2);
 1da:	12 9a       	sbi	0x02, 2	; 2
		DDRC &= ~(1 << DDC1); // Set PINC1 to 0
 1dc:	39 98       	cbi	0x07, 1	; 7
		PORTA &= ~(1<<PORTA2);
 1de:	12 98       	cbi	0x02, 2	; 2
 1e0:	11 c0       	rjmp	.+34     	; 0x204 <__vector_26+0xbc>
	}
	else if(TWSR == 0x80 || TWSR == 0x88){ //data has been received from master
 1e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1e6:	80 38       	cpi	r24, 0x80	; 128
 1e8:	21 f0       	breq	.+8      	; 0x1f2 <__vector_26+0xaa>
 1ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1ee:	88 38       	cpi	r24, 0x88	; 136
		PORTA |= (1<<PORTA3);
		DDRC &= ~(1 << DDC1);
 1f0:	31 f4       	brne	.+12     	; 0x1fe <__vector_26+0xb6>
		databehandling();
 1f2:	13 9a       	sbi	0x02, 3	; 2
 1f4:	39 98       	cbi	0x07, 1	; 7
		enableTWIInterrupt();
 1f6:	85 df       	rcall	.-246    	; 0x102 <databehandling>
		//Do nothing, waiting for data
		PORTA |= (1<<PORTA2);
		DDRC &= ~(1 << DDC1); // Set PINC1 to 0
		PORTA &= ~(1<<PORTA2);
	}
	else if(TWSR == 0x80 || TWSR == 0x88){ //data has been received from master
 1f8:	6d df       	rcall	.-294    	; 0xd4 <enableTWIInterrupt>
		enableTWIInterrupt();
		PORTA &= ~(1<<PORTA3);
	}
	else{
		//If end up here something is wrong with the code, or if last then finished
		PORTA |= (1<<PORTA4);
 1fa:	13 98       	cbi	0x02, 3	; 2
		enableTWIInterrupt();
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <__vector_26+0xbc>
 1fe:	14 9a       	sbi	0x02, 4	; 2
		PORTA &= ~(1<<PORTA4);
 200:	69 df       	rcall	.-302    	; 0xd4 <enableTWIInterrupt>
	}
	
	enableTWIInterrupt();
 202:	14 98       	cbi	0x02, 4	; 2
 204:	67 df       	rcall	.-306    	; 0xd4 <enableTWIInterrupt>
	sei();
 206:	78 94       	sei
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0b be       	out	0x3b, r0	; 59
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <main>:


int main(void) {
	
	enable_pullups();
 22e:	58 df       	rcall	.-336    	; 0xe0 <enable_pullups>

	DDRA = 0xFF;
 230:	8f ef       	ldi	r24, 0xFF	; 255
	
	initI2C();
 232:	81 b9       	out	0x01, r24	; 1

	pwm_init();
 234:	3c df       	rcall	.-392    	; 0xae <initI2C>
	set_speed(100);
 236:	11 d0       	rcall	.+34     	; 0x25a <pwm_init>
 238:	84 e6       	ldi	r24, 0x64	; 100
	set_direction(FORWARD);
 23a:	47 d0       	rcall	.+142    	; 0x2ca <set_speed>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	34 d0       	rcall	.+104    	; 0x2a8 <set_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
 240:	2f e3       	ldi	r18, 0x3F	; 63
 242:	8d e0       	ldi	r24, 0x0D	; 13
 244:	93 e0       	ldi	r25, 0x03	; 3
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x18>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x22>
	_delay_ms(1000);
	stop();
 250:	00 00       	nop
 252:	48 d0       	rcall	.+144    	; 0x2e4 <stop>
	
	sei();
 254:	78 94       	sei
	
	while(1){
		sei();
 256:	78 94       	sei
 258:	fe cf       	rjmp	.-4      	; 0x256 <main+0x28>

0000025a <pwm_init>:
 25a:	84 b1       	in	r24, 0x04	; 4
 25c:	83 60       	ori	r24, 0x03	; 3
 25e:	84 b9       	out	0x04, r24	; 4
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	80 63       	ori	r24, 0x30	; 48
 264:	8a b9       	out	0x0a, r24	; 10
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 26e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 272:	e0 e8       	ldi	r30, 0x80	; 128
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	81 6a       	ori	r24, 0xA1	; 161
 27a:	80 83       	st	Z, r24
 27c:	e1 e8       	ldi	r30, 0x81	; 129
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	83 60       	ori	r24, 0x03	; 3
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <set_left_wheels>:
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	11 f4       	brne	.+4      	; 0x290 <set_left_wheels+0x8>
 28c:	28 9a       	sbi	0x05, 0	; 5
 28e:	08 95       	ret
 290:	81 11       	cpse	r24, r1
 292:	01 c0       	rjmp	.+2      	; 0x296 <set_left_wheels+0xe>
 294:	28 98       	cbi	0x05, 0	; 5
 296:	08 95       	ret

00000298 <set_right_wheels>:
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <set_right_wheels+0x8>
 29c:	29 9a       	sbi	0x05, 1	; 5
 29e:	08 95       	ret
 2a0:	81 11       	cpse	r24, r1
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <set_right_wheels+0xe>
 2a4:	29 98       	cbi	0x05, 1	; 5
 2a6:	08 95       	ret

000002a8 <set_direction>:
 2a8:	cf 93       	push	r28
 2aa:	c8 2f       	mov	r28, r24
 2ac:	ed df       	rcall	.-38     	; 0x288 <set_left_wheels>
 2ae:	8c 2f       	mov	r24, r28
 2b0:	f3 df       	rcall	.-26     	; 0x298 <set_right_wheels>
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <rotate_left>:
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	e7 df       	rcall	.-50     	; 0x288 <set_left_wheels>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	ed cf       	rjmp	.-38     	; 0x298 <set_right_wheels>
 2be:	08 95       	ret

000002c0 <rotate_right>:
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	ea df       	rcall	.-44     	; 0x298 <set_right_wheels>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	e0 cf       	rjmp	.-64     	; 0x288 <set_left_wheels>
 2c8:	08 95       	ret

000002ca <set_speed>:
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2d2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2d6:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2da:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_speed>
 2e2:	08 95       	ret

000002e4 <stop>:
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	f1 cf       	rjmp	.-30     	; 0x2ca <set_speed>
 2e8:	08 95       	ret

000002ea <__divmodhi4>:
 2ea:	97 fb       	bst	r25, 7
 2ec:	07 2e       	mov	r0, r23
 2ee:	16 f4       	brtc	.+4      	; 0x2f4 <__divmodhi4+0xa>
 2f0:	00 94       	com	r0
 2f2:	06 d0       	rcall	.+12     	; 0x300 <__divmodhi4_neg1>
 2f4:	77 fd       	sbrc	r23, 7
 2f6:	08 d0       	rcall	.+16     	; 0x308 <__divmodhi4_neg2>
 2f8:	0b d0       	rcall	.+22     	; 0x310 <__udivmodhi4>
 2fa:	07 fc       	sbrc	r0, 7
 2fc:	05 d0       	rcall	.+10     	; 0x308 <__divmodhi4_neg2>
 2fe:	3e f4       	brtc	.+14     	; 0x30e <__divmodhi4_exit>

00000300 <__divmodhi4_neg1>:
 300:	90 95       	com	r25
 302:	81 95       	neg	r24
 304:	9f 4f       	sbci	r25, 0xFF	; 255
 306:	08 95       	ret

00000308 <__divmodhi4_neg2>:
 308:	70 95       	com	r23
 30a:	61 95       	neg	r22
 30c:	7f 4f       	sbci	r23, 0xFF	; 255

0000030e <__divmodhi4_exit>:
 30e:	08 95       	ret

00000310 <__udivmodhi4>:
 310:	aa 1b       	sub	r26, r26
 312:	bb 1b       	sub	r27, r27
 314:	51 e1       	ldi	r21, 0x11	; 17
 316:	07 c0       	rjmp	.+14     	; 0x326 <__udivmodhi4_ep>
=======
 12e:	86 e8       	ldi	r24, 0x86	; 134
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <databehandling+0x30>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <databehandling+0x3a>
 13c:	00 00       	nop
 13e:	08 95       	ret
			_delay_ms(500);
			break;
		
		case 0x02:
			set_speed(speed);
 140:	8a e5       	ldi	r24, 0x5A	; 90
 142:	e7 d0       	rcall	.+462    	; 0x312 <set_speed>
			set_direction(BACKWARD);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	d4 d0       	rcall	.+424    	; 0x2f0 <set_direction>
 148:	2f e9       	ldi	r18, 0x9F	; 159
 14a:	86 e8       	ldi	r24, 0x86	; 134
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <databehandling+0x4c>
 156:	00 c0       	rjmp	.+0      	; 0x158 <databehandling+0x56>
 158:	00 00       	nop
			_delay_ms(500);
			break;
		
		case 0x03:
			set_speed(speed);
 15a:	08 95       	ret
 15c:	8a e5       	ldi	r24, 0x5A	; 90
 15e:	d9 d0       	rcall	.+434    	; 0x312 <set_speed>
			rotate_right();
 160:	d3 d0       	rcall	.+422    	; 0x308 <rotate_right>
 162:	2f e9       	ldi	r18, 0x9F	; 159
 164:	86 e8       	ldi	r24, 0x86	; 134
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <databehandling+0x66>
 170:	00 c0       	rjmp	.+0      	; 0x172 <databehandling+0x70>
 172:	00 00       	nop
			_delay_ms(500);
			break;
		
		case 0x04:
			set_speed(speed);
 174:	08 95       	ret
 176:	8a e5       	ldi	r24, 0x5A	; 90
 178:	cc d0       	rcall	.+408    	; 0x312 <set_speed>
			rotate_left();
 17a:	c1 d0       	rcall	.+386    	; 0x2fe <rotate_left>
 17c:	2f e9       	ldi	r18, 0x9F	; 159
 17e:	86 e8       	ldi	r24, 0x86	; 134
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <databehandling+0x80>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <databehandling+0x8a>
 18c:	00 00       	nop
 18e:	08 95       	ret

00000190 <__vector_26>:
 190:	1f 92       	push	r1
			break;
	}
}

ISR(TWI_vect) //Interrupt TWI
{
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	0b b6       	in	r0, 0x3b	; 59
 19c:	0f 92       	push	r0
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	cli();
 1b6:	f8 94       	cli
	
	if(TWSR == 0xA8 || TWSR == 0xB8){ // Master returned ACK, more data wanted. Load TWDR with data to transmit
 1b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1bc:	88 3a       	cpi	r24, 0xA8	; 168
 1be:	21 f0       	breq	.+8      	; 0x1c8 <__vector_26+0x38>
 1c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1c4:	88 3b       	cpi	r24, 0xB8	; 184
 1c6:	81 f4       	brne	.+32     	; 0x1e8 <__vector_26+0x58>
		PORTA |= (1<<PORTA0);
 1c8:	10 9a       	sbi	0x02, 0	; 2
		DDRC |= (1 << DDC1);
 1ca:	39 9a       	sbi	0x07, 1	; 7
		TWILoadData(cntr);
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	7d df       	rcall	.-262    	; 0xcc <TWILoadData>
		cntr = (cntr + 1) % 5;
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	65 e0       	ldi	r22, 0x05	; 5
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	a9 d0       	rcall	.+338    	; 0x332 <__divmodhi4>
 1e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTA &= ~(1<<PORTA0);
 1e4:	10 98       	cbi	0x02, 0	; 2
 1e6:	32 c0       	rjmp	.+100    	; 0x24c <__vector_26+0xbc>
	}
	else if(TWSR == 0xC0 || TWSR == 0xC8){ // Slave finished transmit, Master returned NACK(C0) or ACK(C8
 1e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1ec:	80 3c       	cpi	r24, 0xC0	; 192
 1ee:	21 f0       	breq	.+8      	; 0x1f8 <__vector_26+0x68>
 1f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1f4:	88 3c       	cpi	r24, 0xC8	; 200
 1f6:	29 f4       	brne	.+10     	; 0x202 <__vector_26+0x72>
		PORTA |= (1<<PORTA1);
		DDRC |= (1 << DDC1);
 1f8:	11 9a       	sbi	0x02, 1	; 2
		enableTWIInterrupt(); // Transmit is finished, set TWINT flag to 0
 1fa:	39 9a       	sbi	0x07, 1	; 7
 1fc:	6b df       	rcall	.-298    	; 0xd4 <enableTWIInterrupt>
		PORTA &= ~(1<<PORTA1);
 1fe:	11 98       	cbi	0x02, 1	; 2
		DDRC |= (1 << DDC1);
		TWILoadData(cntr);
		cntr = (cntr + 1) % 5;
		PORTA &= ~(1<<PORTA0);
	}
	else if(TWSR == 0xC0 || TWSR == 0xC8){ // Slave finished transmit, Master returned NACK(C0) or ACK(C8
 200:	25 c0       	rjmp	.+74     	; 0x24c <__vector_26+0xbc>
		PORTA |= (1<<PORTA1);
		DDRC |= (1 << DDC1);
		enableTWIInterrupt(); // Transmit is finished, set TWINT flag to 0
		PORTA &= ~(1<<PORTA1);
	}
	else if(TWSR == 0x60 || TWSR == 0x68 || TWSR == 0x70 || TWSR == 0x78){
 202:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 206:	80 36       	cpi	r24, 0x60	; 96
 208:	61 f0       	breq	.+24     	; 0x222 <__vector_26+0x92>
 20a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 20e:	88 36       	cpi	r24, 0x68	; 104
 210:	41 f0       	breq	.+16     	; 0x222 <__vector_26+0x92>
 212:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 216:	80 37       	cpi	r24, 0x70	; 112
 218:	21 f0       	breq	.+8      	; 0x222 <__vector_26+0x92>
 21a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 21e:	88 37       	cpi	r24, 0x78	; 120
 220:	21 f4       	brne	.+8      	; 0x22a <__vector_26+0x9a>
		//Do nothing, waiting for data
		PORTA |= (1<<PORTA2);
 222:	12 9a       	sbi	0x02, 2	; 2
		DDRC &= ~(1 << DDC1); // Set PINC1 to 0
 224:	39 98       	cbi	0x07, 1	; 7
		PORTA &= ~(1<<PORTA2);
 226:	12 98       	cbi	0x02, 2	; 2
 228:	11 c0       	rjmp	.+34     	; 0x24c <__vector_26+0xbc>
	}
	else if(TWSR == 0x80 || TWSR == 0x88){ //data has been received from master
 22a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 22e:	80 38       	cpi	r24, 0x80	; 128
 230:	21 f0       	breq	.+8      	; 0x23a <__vector_26+0xaa>
 232:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 236:	88 38       	cpi	r24, 0x88	; 136
		PORTA |= (1<<PORTA3);
		DDRC &= ~(1 << DDC1);
 238:	31 f4       	brne	.+12     	; 0x246 <__vector_26+0xb6>
		databehandling();
 23a:	13 9a       	sbi	0x02, 3	; 2
 23c:	39 98       	cbi	0x07, 1	; 7
		enableTWIInterrupt();
 23e:	61 df       	rcall	.-318    	; 0x102 <databehandling>
		//Do nothing, waiting for data
		PORTA |= (1<<PORTA2);
		DDRC &= ~(1 << DDC1); // Set PINC1 to 0
		PORTA &= ~(1<<PORTA2);
	}
	else if(TWSR == 0x80 || TWSR == 0x88){ //data has been received from master
 240:	49 df       	rcall	.-366    	; 0xd4 <enableTWIInterrupt>
		enableTWIInterrupt();
		PORTA &= ~(1<<PORTA3);
	}
	else{
		//If end up here something is wrong with the code, or if last then finished
		PORTA |= (1<<PORTA4);
 242:	13 98       	cbi	0x02, 3	; 2
		enableTWIInterrupt();
 244:	03 c0       	rjmp	.+6      	; 0x24c <__vector_26+0xbc>
 246:	14 9a       	sbi	0x02, 4	; 2
		PORTA &= ~(1<<PORTA4);
 248:	45 df       	rcall	.-374    	; 0xd4 <enableTWIInterrupt>
	}
	
	enableTWIInterrupt();
 24a:	14 98       	cbi	0x02, 4	; 2
 24c:	43 df       	rcall	.-378    	; 0xd4 <enableTWIInterrupt>
	sei();
 24e:	78 94       	sei
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0b be       	out	0x3b, r0	; 59
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <main>:


int main(void) {
	
	enable_pullups();
 276:	34 df       	rcall	.-408    	; 0xe0 <enable_pullups>

	DDRA = 0xFF;
 278:	8f ef       	ldi	r24, 0xFF	; 255
	
	initI2C();
 27a:	81 b9       	out	0x01, r24	; 1

	pwm_init();
 27c:	18 df       	rcall	.-464    	; 0xae <initI2C>
	set_speed(100);
 27e:	11 d0       	rcall	.+34     	; 0x2a2 <pwm_init>
 280:	84 e6       	ldi	r24, 0x64	; 100
	set_direction(FORWARD);
 282:	47 d0       	rcall	.+142    	; 0x312 <set_speed>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	34 d0       	rcall	.+104    	; 0x2f0 <set_direction>
 288:	2f e3       	ldi	r18, 0x3F	; 63
 28a:	8d e0       	ldi	r24, 0x0D	; 13
 28c:	93 e0       	ldi	r25, 0x03	; 3
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x18>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x22>
	_delay_ms(1000);
	stop();
 298:	00 00       	nop
 29a:	48 d0       	rcall	.+144    	; 0x32c <stop>
	
	sei();
 29c:	78 94       	sei
	
	while(1){
		sei();
 29e:	78 94       	sei
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <main+0x28>

000002a2 <pwm_init>:
left wheel speed = OCR1A (PD5/19) 8
right wheel speed OCR1B  (PD4/18) 7
*/

void pwm_init() {
	DDRB |= 1<<LEFT_DIR_PORT | 1<<RIGHT_DIR_PORT; 
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	83 60       	ori	r24, 0x03	; 3
 2a6:	84 b9       	out	0x04, r24	; 4
	DDRD |= 1<<LEFT_PWM_PORT | 1<<RIGHT_PWM_PORT;
 2a8:	8a b1       	in	r24, 0x0a	; 10
 2aa:	80 63       	ori	r24, 0x30	; 48
 2ac:	8a b9       	out	0x0a, r24	; 10
	ICR1 = 255;
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2b6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
 2ba:	e0 e8       	ldi	r30, 0x80	; 128
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	81 6a       	ori	r24, 0xA1	; 161
 2c2:	80 83       	st	Z, r24
	TCCR1B |= 1 << WGM31 | 1 << WGM21 | 1 << CS10;
 2c4:	e1 e8       	ldi	r30, 0x81	; 129
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	83 60       	ori	r24, 0x03	; 3
 2cc:	80 83       	st	Z, r24
 2ce:	08 95       	ret

000002d0 <set_left_wheels>:
	set_left_wheels(FORWARD);
}

// Sets direction of left wheel pair
void set_left_wheels(enum Direction dir) {
	if (dir == FORWARD) {
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <set_left_wheels+0x8>
		set_bit(PORTB, LEFT_DIR_PORT);
 2d4:	28 9a       	sbi	0x05, 0	; 5
 2d6:	08 95       	ret
	}
	else if (dir == BACKWARD) {
 2d8:	81 11       	cpse	r24, r1
 2da:	01 c0       	rjmp	.+2      	; 0x2de <set_left_wheels+0xe>
		clear_bit(PORTB, LEFT_DIR_PORT);
 2dc:	28 98       	cbi	0x05, 0	; 5
 2de:	08 95       	ret

000002e0 <set_right_wheels>:
	}
}

// Sets direction of right wheel pair
void set_right_wheels(enum Direction dir) {
	if (dir == FORWARD) {
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	11 f4       	brne	.+4      	; 0x2e8 <set_right_wheels+0x8>
		set_bit(PORTB, RIGHT_DIR_PORT);
 2e4:	29 9a       	sbi	0x05, 1	; 5
 2e6:	08 95       	ret
	}
	else if (dir == BACKWARD) {
 2e8:	81 11       	cpse	r24, r1
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <set_right_wheels+0xe>
		clear_bit(PORTB, RIGHT_DIR_PORT);
 2ec:	29 98       	cbi	0x05, 1	; 5
 2ee:	08 95       	ret

000002f0 <set_direction>:
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
	TCCR1B |= 1 << WGM31 | 1 << WGM21 | 1 << CS10;
}

// Sets the direction of both wheels
void set_direction(enum Direction dir){
 2f0:	cf 93       	push	r28
 2f2:	c8 2f       	mov	r28, r24
	set_left_wheels(dir);
 2f4:	ed df       	rcall	.-38     	; 0x2d0 <set_left_wheels>
	set_right_wheels(dir);
 2f6:	8c 2f       	mov	r24, r28
 2f8:	f3 df       	rcall	.-26     	; 0x2e0 <set_right_wheels>
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <rotate_left>:

// Rotates robot to the left
void rotate_left() {
	set_left_wheels(BACKWARD);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	e7 df       	rcall	.-50     	; 0x2d0 <set_left_wheels>
	set_right_wheels(FORWARD);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	ed cf       	rjmp	.-38     	; 0x2e0 <set_right_wheels>
 306:	08 95       	ret

00000308 <rotate_right>:
}

// Rotates robot to the right
void rotate_right() {
	set_right_wheels(BACKWARD);
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	ea df       	rcall	.-44     	; 0x2e0 <set_right_wheels>
	set_left_wheels(FORWARD);
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	e0 cf       	rjmp	.-64     	; 0x2d0 <set_left_wheels>
 310:	08 95       	ret

00000312 <set_speed>:
	}
}

// Sets speed of both wheels
void set_speed(uint8_t speed) {
	LEFT_WHEEL_SPEED = speed;
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 31a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	RIGHT_WHEEL_SPEED = speed;
 31e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 322:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	current_speed = speed;
 326:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current_speed>
 32a:	08 95       	ret

0000032c <stop>:
}

// Stops wheels by setting speed to 0
void stop() {
	set_speed(0);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	f1 cf       	rjmp	.-30     	; 0x312 <set_speed>
 330:	08 95       	ret
>>>>>>> sensorIntegration

00000318 <__udivmodhi4_loop>:
 318:	aa 1f       	adc	r26, r26
 31a:	bb 1f       	adc	r27, r27
 31c:	a6 17       	cp	r26, r22
 31e:	b7 07       	cpc	r27, r23
 320:	10 f0       	brcs	.+4      	; 0x326 <__udivmodhi4_ep>
 322:	a6 1b       	sub	r26, r22
 324:	b7 0b       	sbc	r27, r23

00000326 <__udivmodhi4_ep>:
 326:	88 1f       	adc	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	5a 95       	dec	r21
 32c:	a9 f7       	brne	.-22     	; 0x318 <__udivmodhi4_loop>
 32e:	80 95       	com	r24
 330:	90 95       	com	r25
 332:	bc 01       	movw	r22, r24
 334:	cd 01       	movw	r24, r26
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
